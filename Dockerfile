# Dockerfile for Next.js App (Standalone Output)

# ---- Stage 1: Build ----
# Use an official Node.js LTS version (e.g., 18 or 20)
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install dependencies based on the preferred package manager
# Copy package.json and lock file
COPY package*.json ./
# Uncomment and use below line if using yarn
# COPY yarn.lock ./
# Uncomment and use below line if using pnpm
# COPY pnpm-lock.yaml ./

# Install dependencies using 'ci' for consistency
RUN npm ci
# Or: RUN yarn install --frozen-lockfile
# Or: RUN pnpm install --frozen-lockfile

# Copy the rest of the application source code
COPY . .

# Set NEXT_TELEMETRY_DISABLED to 1 to disable telemetry during build
ENV NEXT_TELEMETRY_DISABLED 1

# Build the Next.js application for production
RUN npm run build
# Or: RUN yarn build
# Or: RUN pnpm build


# ---- Stage 2: Production Runner ----
# Use a minimal Node.js image for the final stage
FROM node:18-alpine AS runner

WORKDIR /app

# Set NEXT_TELEMETRY_DISABLED to 1 to disable telemetry in production
ENV NEXT_TELEMETRY_DISABLED 1
# Set NODE_ENV to production for optimized performance
ENV NODE_ENV production

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
# Copy the standalone folder from the build stage (contains server.js and dependencies)
COPY --from=builder /app/.next/standalone ./

# Copy the public folder (for static assets like images, fonts)
COPY --from=builder /app/public ./public
# Copy the static assets generated by the build (.next/static)
COPY --from=builder /app/.next/static ./.next/static

# Expose the port the Next.js server listens on (default 3000)
EXPOSE 3000

# Optional: Set user for security (requires user creation steps)
# USER nextjs

# Command to run the Node.js server produced by `next build` in standalone mode
CMD ["node", "server.js"]
