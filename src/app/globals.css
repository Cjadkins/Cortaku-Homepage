/* styles/globals.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* --- GLOBAL HTML & BODY STYLES --- */
html {
  /* Base HTML styling. */
}

body {
  /* Applies base background colors for light/dark themes from Tailwind config. */
  @apply bg-bg-light dark:bg-bg-dark;
  /* Sets a custom cursor for the entire body. */
  cursor: url('/cursors/keyblade.png') 45 5, auto; /* Hotspot defines the cursor's active point. */
  /* Defines a fallback font stack with good emoji support. */
  font-family: "Segoe UI Emoji", "Apple Color Emoji", "Noto Color Emoji", sans-serif;
  /* Improves touch responsiveness on mobile by preventing default browser actions. */
  touch-action: manipulation;
}

/* --- APP CARD STYLES --- */
/* Defines a custom hover cursor for AppCard links. */
.app-card-link:hover {
  /* Rotated keyblade cursor for app card hover state. */
  cursor: url('/cursors/keyblade-slash.png') 45 5, auto; /* Hotspot adjusted. */
}

/* --- CURSOR PRELOADING --- */
/* Utility class to preload the hover cursor image, preventing delay on first hover. */
/* Element is visually hidden but forces the browser to load the cursor resource. */
.preload-slash-cursor {
  cursor: url('/cursors/keyblade-slash.png') 45 5, auto; /* Application triggers resource load. */
  position: absolute; /* Removes from document flow. */
  width: 1px;
  height: 1px;
  opacity: 0;
  pointer-events: none; /* Element is not interactive. */
  left: -9999px; /* Positioned off-screen. */
  top: -9999px;
}

/* --- CHERRY BLOSSOM ANIMATION STYLES --- */
/* Container for falling cherry blossoms, fixed to the viewport. */
.blossom-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh; /* Spans full viewport height. */
  pointer-events: none; /* Interactions pass through to elements underneath. */
  overflow: hidden; /* Prevents scrollbars if blossoms exceed boundaries. */
  z-index: 9999;    /* High z-index to render on top of most content. */
  isolation: isolate; /* Creates a new stacking context. */
}

/* Combined animation for blossom falling and swaying movement. */
@keyframes blossom-fall-combined {
  0%   { transform: translateY(-10%) translateX(0px); opacity: 1; }
  25%  { transform: translateY(25vh) translateX(5px); }  /* Sways right. */
  50%  { transform: translateY(55vh) translateX(-5px); } /* Sways left. */
  75%  { transform: translateY(85vh) translateX(5px); }  /* Sways right again. */
  100% { transform: translateY(110vh) translateX(0px); opacity: 0; } /* Falls off screen and fades. */
}

/* Style for individual blossom petals. */
.blossom {
  position: absolute;
  top: -10%; /* Starts above the viewport. */
  left: var(--left); /* Horizontal start position is controlled by JavaScript via CSS variable. */
  width: 15px;
  height: 15px;
  background-color: theme('colors.blossom'); /* Color defined in Tailwind theme configuration. */
  border-radius: 50% 0 50% 0; /* Creates a petal shape. */
  opacity: 1; /* Starts fully opaque. */

  /* Animation properties, with duration and delay controlled by JS via CSS variables. */
  animation-name: blossom-fall-combined;
  animation-duration: var(--duration);
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  animation-delay: var(--delay);

  /* Performance optimizations for the animation. */
  will-change: transform, opacity; /* Hints to the browser about upcoming changes. */
  transform-style: preserve-3d;   /* Enables 3D transformations. */
  backface-visibility: hidden;    /* Hides the back face of the element during transforms. */
  transform: translateZ(0);       /* Promotes the element to its own compositor layer for smoother animation. */
}

/* --- IDLE CHARACTER (BOT) EASTER EGG STYLES --- */
/* Animation for the bot character appearing. */
@keyframes peek-out {
  0%   { transform: translate(-30%, -30%) scale(0.8) rotate(0deg); opacity: 0; } /* Starts offset, small, and transparent. */
  40%  { transform: translate(-50%, -50%) scale(1) rotate(-10deg); opacity: 1;} /* Moves to center, scales up, tilts. */
  60%  { transform: translate(-50%, -50%) scale(1) rotate(5deg); }  /* Tilts other way. */
  100% { transform: translate(-50%, -50%) scale(1) rotate(0deg); opacity: 1; } /* Settles in center. */
}

/* Animation for the bot character hiding. */
@keyframes hide-behind {
  0%   { transform: translate(-50%, -50%) scale(1) rotate(0deg); opacity: 1; } /* Starts centered and visible. */
  100% { transform: translate(-30%, -30%) scale(0.8); opacity: 0; } /* Moves offset, scales down, and fades. */
}

/* Base style for the idle character. */
.idle-character {
  position: absolute;
  font-size: 2.5rem; /* Base size, actual icon size might be from its component's class. */
  z-index: 22; /* Stacking order. */
  pointer-events: none; /* Not interactive. */
  opacity: 0; /* Starts hidden. */
  transform: translate(-50%, -50%); /* Centering adjustment for absolute positioning. */
  transform-origin: center center;  /* Rotation and scaling origin. */
}

/* Style applied when the idle character is set to be visible. */
.idle-character.visible {
  opacity: 1;
  animation: peek-out 1.5s ease-in-out forwards; /* Runs the peek-out animation and retains final state. */
}

/* Style applied when the idle character is set to be hiding. */
.idle-character.hiding {
  opacity: 1; /* Starts visible for the animation to properly execute from visible state. */
  animation: hide-behind 1s ease-in forwards; /* Runs the hide-behind animation and retains final state. */
}

/* --- RAINBOW EASTER EGG STYLES --- */
/* Keyframes for a flashing rainbow background effect. */
@keyframes flashRainbow {
  0%   { background-color: red; }
  14%  { background-color: orange; }
  28%  { background-color: yellow; }
  42%  { background-color: green; }
  57%  { background-color: blue; }
  71%  { background-color: indigo; }
  85%  { background-color: violet; }
  100% { background-color: red; }
}

/* Class to apply the flashing rainbow animation, typically for an overlay. */
.animate-flashRainbow {
  animation: flashRainbow 3.5s linear infinite;
}

/* Class for a gradient rainbow background with animation. */
.bg-rainbow {
  background: linear-gradient(270deg, red, orange, yellow, green, blue, indigo, violet);
  background-size: 1400% 1400%; /* Large background size for smooth gradient transition during animation. */
  animation: flashRainbow 7s linear infinite; /* Uses same keyframes, different duration. */
}

/* Ensures emoji buttons use appropriate emoji-supporting fonts. */
.emoji-button {
  font-family: "Segoe UI Emoji", "Apple Color Emoji", "Noto Color Emoji", sans-serif;
}

/* Keyframes for horizontal marquee (scrolling text/elements). */
@keyframes marquee {
  0%   { transform: translateX(100%); } /* Starts off-screen to the right. */
  100% { transform: translateX(-100%); } /* Ends off-screen to the left. */
}

/* Class to apply a standard speed marquee animation. */
.animate-marquee {
  animation: marquee 8s linear infinite;
}

/* Class to apply a faster marquee animation. */
.animate-marquee-fast {
  animation: marquee 2s linear infinite; /* Uses the same marquee keyframes, shorter duration. */
}

/* --- MOBILE UI ENHANCEMENTS --- */
/* Styles applied specifically for screens up to 800px wide. */
@media (max-width: 800px) {
  /* Adjusts AppCard layout for smaller screens to be horizontal list-like items. */
  .app-card-link {
    width: 100% !important;
    aspect-ratio: auto !important;
    flex-direction: row !important;
    align-items: center !important;
    justify-content: flex-start !important;
    gap: 1rem !important;
    padding: 1rem !important;
    border-radius: 0.75rem !important;
    height: auto !important;
  }

  .app-card-link h3 { /* Title within AppCard on mobile. */
    font-size: 1rem !important;
    text-align: left !important;
    margin: 0 !important;
  }

  /* Stacks AppCards vertically on mobile. */
  .mobile-card-stack {
    display: flex !important;
    flex-direction: column !important;
    gap: 1rem !important;
  }

  /* Adjusts inner layout of AppCard for horizontal display on mobile. */
  .app-card-inner {
    display: flex !important;
    flex-direction: row !important;
    align-items: center !important;
    justify-content: flex-start !important;
    gap: 1rem !important;
    width: 100%;
  }

  /* Ensures icon wrapper in AppCard doesn't shrink and has reduced padding. */
  .icon-wrapper {
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem !important; 
  }

  /* Allows title wrapper in AppCard to grow and aligns text. */
  .title-wrapper {
    flex-grow: 1;
    display: flex;
    align-items: center;
  }

  .title-wrapper h3 { /* Title within the title wrapper on mobile. */
    font-size: 1rem !important;
    text-align: left;
    margin: 0;
  }

  /* Reduces general h1 heading size on mobile. */
  h1 { 
    font-size: 2.5rem !important;
  }

  /* Changes footer positioning on mobile for simpler layout. */
  footer {
    position: relative !important; 
  }

  /* Adjusts scaling for AppCard wrappers on mobile if the .scale-90 class is used. */
  .scale-90 { 
    transform: scale(0.85); 
  }

  /* Adjusts idle character size and stacking order on mobile. */
  .idle-character {
    transform: translate(-50%, -50%) scale(0.9); 
    z-index: 15 !important; /* Places it behind cards (z-index 20). */
  }
}

/* --- JUMP GAME CANVAS STYLES --- */
/* Base styles for the game canvas element. */
.jump-game-canvas-styles {
  display: block; /* Removes extra space that can appear below inline canvas. */
  background-color: black; /* Fallback background, actual game draws over this. */
  border-radius: 0.375rem; /* Equivalent to Tailwind's rounded-md. */
  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); /* Tailwind's shadow-lg. */
  border: 2px solid white;
}

/* Styles for forcing landscape orientation for the JumpGame on mobile portrait views. */
@media (max-width: 800px) and (orientation: portrait) {
  .rotate-landscape-wrapper {
    position: fixed; /* Takes over the screen. */
    top: 0;
    left: 0;
    width: 100vh; /* Swaps viewport width and height for rotation. */
    height: 100vw;
    transform: rotate(-90deg) translateX(-100%); /* Rotates and shifts into view. */
    transform-origin: top left; /* Sets rotation origin to top-left corner. */
    display: flex;
    justify-content: center;
    align-items: center;
    background: black; /* Background for the rotated area. */
    z-index: 9999;    /* Ensures it's on top of all other page content. */
    overflow: hidden; /* Hides any part of canvas that might stick out. */
  }
  
  /* Ensures canvas within the rotated wrapper fills its new dimensions. */
  .rotate-landscape-wrapper canvas, 
  .rotate-landscape-wrapper .jump-game-canvas-styles { 
    width: 100% !important;  /* Fills the rotated wrapper's width (original screen height). */
    height: 100% !important; /* Fills the rotated wrapper's height (original screen width). */
    display: block;
    object-fit: fill; /* Stretches canvas to fill the rotated dimensions. */
  }
}